"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1548],{8741:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>a});var s=t(4848),o=t(8453);const r={sidebar_position:3},c="Counters",i={id:"documents/counters",title:"Counters",description:"If you have a numeric value that is only ever changed by adding or subtracting (e.g. counting how",source:"@site/docs/documents/counters.md",sourceDirName:"documents",slug:"/documents/counters",permalink:"/docs/documents/counters",draft:!1,unlisted:!1,editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/documents/counters.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Simple Values",permalink:"/docs/documents/values"},next:{title:"Lists",permalink:"/docs/documents/lists"}},u={},a=[];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"counters",children:"Counters"}),"\n",(0,s.jsxs)(n.p,{children:["If you have a numeric value that is only ever changed by adding or subtracting (e.g. counting how\nmany times the user has done a particular thing), you should use the ",(0,s.jsx)(n.code,{children:"Automerge.Counter"})," datatype\ninstead of a plain number, because it deals with concurrent changes correctly."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," Using the ",(0,s.jsx)(n.code,{children:"Automerge.Counter"})," datatype is safer than changing a number value yourself\nusing the ",(0,s.jsx)(n.code,{children:"++"})," or ",(0,s.jsx)(n.code,{children:"+= 1"})," operators. For example, suppose the value is currently ",(0,s.jsx)(n.strong,{children:"3"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If two users increment it concurrently, they will both register ",(0,s.jsx)(n.strong,{children:"4"})," as the new value, whereas\nthe two increments should result in a value of ",(0,s.jsx)(n.strong,{children:"5"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If one user increments twice and the other user increments three times before the documents are\nmerged, we will now have ",(0,s.jsx)(n.a,{href:"#conflicting-changes",children:"conflicting changes"})," (",(0,s.jsx)(n.strong,{children:"5"})," vs. ",(0,s.jsx)(n.strong,{children:"6"}),"), rather\nthan the desired value of ",(0,s.jsx)(n.strong,{children:"8"})," (3 + 2 + 3)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To set up a ",(0,s.jsx)(n.code,{children:"Counter"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"state = Automerge.change(state, (doc) => {\n  // The counter is initialized to 0 by default. You can pass a number to the\n  // Automerge.Counter constructor if you want a different initial value.\n  doc.buttonClicks = new Automerge.Counter();\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To get the current counter value, use ",(0,s.jsx)(n.code,{children:"doc.buttonClicks.value"}),". Whenever you want to increase or\ndecrease the counter value, you can use the ",(0,s.jsx)(n.code,{children:".increment()"})," or ",(0,s.jsx)(n.code,{children:".decrement()"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"state = Automerge.change(state, (doc) => {\n  doc.buttonClicks.increment(); // Add 1 to counter value\n  doc.buttonClicks.increment(4); // Add 4 to counter value\n  doc.buttonClicks.decrement(3); // Subtract 3 from counter value\n});\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," In relational databases it is common to use an auto-incrementing counter to generate\nprimary keys for rows in a table, but this is not safe in Automerge, since several users may end\nup generating the same counter value! Instead it is best to use UUIDs to identify entities."]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);