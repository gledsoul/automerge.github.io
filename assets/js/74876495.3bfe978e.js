"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6505],{2622:(e,t,n)=>{n.r(t),n.d(t,{Exercise:()=>g,Figure:()=>j,Solution:()=>x,assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>h,metadata:()=>u,toc:()=>f});var o=n(4848),r=n(8453),s=n(7293),a=n(1470),i=n(9365);const c=n.p+"assets/medias/task-list-sync-8b4592fc5718f85e407172bca42a9c13.webm",d=n.p+"assets/medias/task-list-pre-automerge-9958b1abec46a458fdb55736172b5960.webm",l=(n.p,n.p+"assets/images/amg-arch-KleppmannStrangeLoop2023-747be6a944d8f4a21291d336e8666f86.webp"),h={sidebar_position:1,title:"A Builder's Tour of Automerge"},p=void 0,u={id:"quickstart",title:"A Builder's Tour of Automerge",description:"Automerge is a suite of tools for building local-first web applications with real-time synchronization that works on and offline.",source:"@site/docs/quickstart.mdx",sourceDirName:".",slug:"/quickstart",permalink:"/docs/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/quickstart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"A Builder's Tour of Automerge"},sidebar:"tutorialSidebar",previous:{title:"Welcome to Automerge",permalink:"/docs/hello"},next:{title:"Concepts",permalink:"/docs/concepts"}},m={};function g({children:e}){return(0,o.jsx)(s.A,{type:"tip",title:"Exercise",children:e})}function x({children:e}){const t={details:"details",summary:"summary",...(0,r.R)()};return(0,o.jsxs)(t.details,{children:[(0,o.jsx)(t.summary,{children:"Solution"}),e]})}function j({src:e,alt:t,caption:n}){const s={figcaption:"figcaption",figure:"figure",img:"img",video:"video",...(0,r.R)()},a={width:"100%",objectFit:"contain",padding:"1em",backgroundColor:"inherit"};return(0,o.jsxs)(s.figure,{style:{margin:"1em auto",textAlign:"center",border:"1px solid var(--ifm-color-primary)",borderRadius:20,maxWidth:720},children:[e.endsWith(".webm")?(0,o.jsx)(s.video,{src:e,type:"video/webm",style:a,alt:t||n,autoPlay:!0,loop:!0,muted:!0}):(0,o.jsx)(s.img,{src:e,type:"img/webp",style:a,alt:t||n}),(0,o.jsx)(s.figcaption,{style:{padding:"1em"},children:n})]})}const f=[{value:"Setup",id:"setup",level:2},{value:"Architecture of an Automerge App",id:"architecture-of-an-automerge-app",level:2},{value:"Manage docs with a <code>Repo</code>",id:"manage-docs-with-a-repo",level:2},{value:"Storage &amp; Network Adapters",id:"storage--network-adapters",level:3},{value:"Import your storage &amp; network adapters",id:"import-your-storage--network-adapters",level:4},{value:"Initialize your Repo",id:"initialize-your-repo",level:4},{value:"Repos in React: <code>RepoContext</code>",id:"repos-in-react-repocontext",level:3},{value:"Add a <code>RepoContext</code> to the React app",id:"add-a-repocontext-to-the-react-app",level:4},{value:"Doc Handles &amp; URLs",id:"doc-handles--urls",level:3},{value:"Create/Find a Document",id:"createfind-a-document",level:3},{value:"Read &amp; edit a <code>Document</code>",id:"read--edit-a-document",level:2},{value:"Docs in React: <code>useDocument</code>",id:"docs-in-react-usedocument",level:3},{value:"Access the given document in the <code>App</code> component",id:"access-the-given-document-in-the-app-component",level:4},{value:"Load the task list document",id:"load-the-task-list-document",level:4},{value:"Read a document&#39;s contents",id:"read-a-documents-contents",level:3},{value:"Documents vs. JS Objects",id:"documents-vs-js-objects",level:3},{value:"Edit a document",id:"edit-a-document",level:3},{value:"Collaboration in Automerge",id:"collaboration-in-automerge",level:2},{value:"Collaborating Locally",id:"collaborating-locally",level:3},{value:"Collaborating over the internet",id:"collaborating-over-the-internet",level:3},{value:"Add a <code>BrowserWebSocketClientAdapter</code>",id:"add-a-browserwebsocketclientadapter",level:4},{value:"Network Not Required",id:"network-not-required",level:3},{value:"Next Steps",id:"next-steps",level:2}];function w(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Automerge is a suite of tools for building ",(0,o.jsx)(t.a,{href:"https://www.inkandswitch.com/local-first",children:"local-first"})," web applications with real-time synchronization that works on and offline."]}),"\n",(0,o.jsxs)(t.p,{children:["In this tutorial, you'll build a local-first multiplayer app with TypeScript, React, ",(0,o.jsx)(t.a,{href:"https://vite.dev",children:"Vite"}),", and Automerge. You'll discover how to:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Represent data as Automerge ",(0,o.jsx)(t.a,{href:"/docs/concepts/#documents",children:"Documents"})]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/docs/documents/conflicts/",children:"Change"})," documents' data and ",(0,o.jsx)(t.a,{href:"/docs/under-the-hood/merge_rules/",children:"merge"})," changes from different peers"]}),"\n",(0,o.jsxs)(t.li,{children:["Store & synchronize a set of documents in an Automerge ",(0,o.jsx)(t.a,{href:"/docs/concepts/#repositories",children:"Repository"})]}),"\n",(0,o.jsxs)(t.li,{children:["Build a multiplayer realtime web app with the Automerge ",(0,o.jsx)(t.a,{href:"https://github.com/automerge/automerge-repo/tree/main/packages/automerge-repo-react-hooks",children:"React client"})]}),"\n"]}),"\n",(0,o.jsx)(j,{src:c,alt:'Screen capture of two browser windows side-by-side showing the same app titled "Automerge Task List". As the user clicks buttons, enters text or checks boxes in one window, their changes show up immediately in the other window.',caption:"The app in action. Data is stored locally, and Automerge syncs changes between users automatically."}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(s.A,{type:"info",children:(0,o.jsxs)(t.p,{children:["All the code here can be found at the ",(0,o.jsx)(t.a,{href:"https://github.com/automerge/automerge-repo-quickstart",children:"automerge-repo-quickstart"})," repo."]})}),"\n",(0,o.jsx)(t.p,{children:"To get started:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["clone the tutorial project from ",(0,o.jsx)(t.a,{href:"https://github.com/automerge/automerge-repo-quickstart",children:"automerge-repo-quickstart"})]}),"\n",(0,o.jsxs)(t.li,{children:["in the ",(0,o.jsx)(t.code,{children:"automerge-repo-quickstart"})," directory, install the project dependencies"]}),"\n",(0,o.jsx)(t.li,{children:"start the local Vite development server"}),"\n"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(i.A,{value:"npm",label:"npm",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"$ git clone https://github.com/automerge/automerge-repo-quickstart\n# Cloning into 'automerge-repo-quickstart'...\n$ cd automerge-repo-quickstart\n$ npm install\n# ...installing dependencies...\n$ npm run dev\n"})})}),(0,o.jsx)(i.A,{value:"yarn",label:"yarn",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"$ git clone https://github.com/automerge/automerge-repo-quickstart\n# Cloning into 'automerge-repo-quickstart'...\n$ cd automerge-repo-quickstart\n$ yarn\n# ...installing dependencies...\n$ yarn dev\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Visit ",(0,o.jsx)(t.a,{href:"http://localhost:5173/automerge-repo-quickstart/",children:"localhost:5173/automerge-repo-quickstart/"}),' to see the app in its "starter" state, as a basic React app not yet using Automerge: the task list can be edited, but changes are not synced between users, and all local changes are lost when the page is closed or reloaded.']}),"\n",(0,o.jsx)(j,{src:d,alt:"Screen capture of the non-syncing app",caption:"The (unimpressive) app before you give it superpowers with Automerge"}),"\n",(0,o.jsx)(t.p,{children:"Let's fix all that with Automerge!"}),"\n",(0,o.jsx)(t.p,{children:"In the exercises that follow, you'll modify the source code to:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Configure a Repository to store & sync document changes locally"}),"\n",(0,o.jsx)(t.li,{children:"Create/retrieve a task list Document by its Document URL"}),"\n",(0,o.jsx)(t.li,{children:"Use the Automerge React client to update the Doc's data on user input"}),"\n",(0,o.jsx)(t.li,{children:"Update the Repo to also sync changes over the network (when available)"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"architecture-of-an-automerge-app",children:"Architecture of an Automerge App"}),"\n",(0,o.jsxs)(t.p,{children:["Building apps with Automerge requires familiarity with two key concepts: ",(0,o.jsx)(t.strong,{children:"Documents"})," and ",(0,o.jsx)(t.strong,{children:"Repositories"}),"."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["An Automerge ",(0,o.jsx)(t.a,{href:"/docs/concepts/#documents",children:"Document"})," (Doc) models app data using a specialized data structure that supports conflict-free collaboration via git-like merges."]}),"\n",(0,o.jsxs)(t.li,{children:["An Automerge ",(0,o.jsx)(t.a,{href:"/docs/concepts/#repositories",children:"Repository"})," (Repo) determines how/where the app stores and synchronizes those documents, locally and/or over the network."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Automerge is built in Rust, but stack-agnostic and useful for building apps on any platform, with client libraries for many popular languages/frameworks."}),"\n",(0,o.jsx)("a",{href:"https://www.youtube.com/watch?v=Mr0a5KyD6BU",title:'Watch "New algorithms for collaborative text editing" by Martin Kleppmann (Strange Loop 2023) on YouTube',children:(0,o.jsx)(j,{src:l,alt:"Diagram of automerge project components, including automerge and automerge-repo",caption:'Automerge system diagram from  "New algorithms for collaborative text editing" by Martin Kleppmann (Strange Loop 2023)'})}),"\n",(0,o.jsxs)(t.p,{children:["The foundational ",(0,o.jsx)(t.code,{children:"Document"})," data structure & related algorithms are defined in the ",(0,o.jsx)(t.a,{href:"https://github.com/automerge/automerge",children:(0,o.jsx)(t.code,{children:"@automerge/automerge"})})," core library, which used under the hood by the ",(0,o.jsx)(t.a,{href:"https://github.com/automerge/automerge-repo",children:(0,o.jsx)(t.code,{children:"@automerge/automerge-repo"})})," library, which exposes the practical conveniences for managing documents via a ",(0,o.jsx)(t.code,{children:"Repo"}),"."]}),"\n",(0,o.jsxs)(t.h2,{id:"manage-docs-with-a-repo",children:["Manage docs with a ",(0,o.jsx)(t.code,{children:"Repo"})]}),"\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.a,{href:"/docs/repositories/",children:(0,o.jsx)(t.code,{children:"Repo"})})," keeps track of all the documents you load and makes sure they're properly synchronized and stored. It provides an interface to:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"create, modify, and manage documents locally"}),"\n",(0,o.jsx)(t.li,{children:"send & receive changes to/from others, and"}),"\n",(0,o.jsx)(t.li,{children:"merge multiple changes as needed."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Each Repo needs to know:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Where its documents should be saved, specified via a ",(0,o.jsx)(t.a,{href:"/docs/repositories/storage/",children:(0,o.jsx)(t.code,{children:"StorageAdapter"})})]}),"\n",(0,o.jsxs)(t.li,{children:["How/Where to send, retrieve, and synchronize doc updates, specified via zero or more ",(0,o.jsx)(t.a,{href:"/docs/repositories/networking/",children:(0,o.jsx)(t.code,{children:"NetworkAdapter"})}),"s"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Repo"})," constructor from ",(0,o.jsx)(t.a,{href:"https://github.com/automerge/automerge-repo",children:(0,o.jsx)(t.code,{children:"@automerge/automerge-repo"})})," lets you create & configure a Repository, specifying the ",(0,o.jsx)(t.code,{children:"StorageAdapter"})," and ",(0,o.jsx)(t.code,{children:"NetworkAdapter"}),"(s) you need."]}),"\n",(0,o.jsxs)(t.p,{children:["Those adapters can be imported from their respective ",(0,o.jsx)(t.code,{children:"@automerge/automerge-repo-storage-*"})," and ",(0,o.jsx)(t.code,{children:"@automerge/automerge-repo-network-*"})," packages."]}),"\n",(0,o.jsx)(s.A,{type:"info",title:"Roll your own adapter",children:(0,o.jsxs)(t.p,{children:["If none of the pre-built adapters fit your needs, you can create ",(0,o.jsx)(t.a,{href:"/docs/repositories/storage/#roll-your-own",children:"custom adapter(s)"})," as needed."]})}),"\n",(0,o.jsx)(t.h3,{id:"storage--network-adapters",children:"Storage & Network Adapters"}),"\n",(0,o.jsx)(t.p,{children:"Currently, the task list app doesn't persist or sync any changes, even locally."}),"\n",(0,o.jsx)(t.p,{children:"To prepare to add local multiplayer capabilities to the app, you'll initialize a local-first Repo to:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["save Docs client-side in the browser's ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",children:"IndexedDB"}),", using the ",(0,o.jsx)(t.code,{children:"IndexedDBStorageAdapter"})," from ",(0,o.jsx)(t.code,{children:"@automerge/automerge-repo-storage-indexeddb"})]}),"\n",(0,o.jsxs)(t.li,{children:["keep local users (i.e. tabs within the same browser/origin) in sync via a ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",children:"Broadcast Channel"}),", using the ",(0,o.jsx)(t.code,{children:"BroadcastChannelNetworkAdapter"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(g,{children:[(0,o.jsx)(t.h4,{id:"import-your-storage--network-adapters",children:"Import your storage & network adapters"}),(0,o.jsxs)(t.p,{children:["In ",(0,o.jsx)(t.code,{children:"src/main.tsx"}),", import and instantiate an ",(0,o.jsx)(t.code,{children:"IndexedDBStorageAdapter"})," and ",(0,o.jsx)(t.code,{children:"BroadcastChannelNetworkAdapter"})," from their ",(0,o.jsx)(t.code,{children:"@automerge/automerge-repo-*"})," packages, which have already been included in the project dependencies."]}),(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Solution"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n// highlight-start\nimport { IndexedDBStorageAdapter } from \"@automerge/automerge-repo-storage-indexeddb\"\nimport { BroadcastChannelNetworkAdapter } from '@automerge/automerge-repo-network-broadcastchannel'\n\nconst broadcast = new BroadcastChannelNetworkAdapter();\nconst indexedDB = new IndexedDBStorageAdapter();\n// highlight-end\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n\n"})})]}),(0,o.jsx)(t.h4,{id:"initialize-your-repo",children:"Initialize your Repo"}),(0,o.jsxs)(t.p,{children:["Using the ",(0,o.jsx)(t.code,{children:"Repo"})," constructor from ",(0,o.jsx)(t.code,{children:"@automerge/automerge-repo"}),", initialize your new repo by passing in the given adapters as the ",(0,o.jsx)(t.code,{children:"storage"})," and ",(0,o.jsx)(t.code,{children:"network"})," properties of the options object accepted by the constructor."]}),(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Solution"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { IndexedDBStorageAdapter } from \"@automerge/automerge-repo-storage-indexeddb\"\nimport { BroadcastChannelNetworkAdapter } from '@automerge/automerge-repo-network-broadcastchannel'\n// highlight-next-line\nimport { Repo } from '@automerge/automerge-repo'\n\nconst broadcast = new BroadcastChannelNetworkAdapter();\nconst indexedDB = new IndexedDBStorageAdapter();\n\n// highlight-start\nconst repo = new Repo({\n  storage: indexedDB,\n  network: [broadcast],\n})\n// highlight-end\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n\n"})})]})]}),"\n",(0,o.jsxs)(t.h3,{id:"repos-in-react-repocontext",children:["Repos in React: ",(0,o.jsx)(t.code,{children:"RepoContext"})]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsxs)(t.a,{href:"https://github.com/automerge/automerge-repo-react-hooks",children:[(0,o.jsx)(t.code,{children:"@automerge/automerge-repo-react-hooks"})," package"]})," provides some React-specific conveniences for working with Automerge repositories."]}),"\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.code,{children:"RepoContext"})," makes your repo and its documents available throughout your React application, via ",(0,o.jsx)(t.code,{children:"useRepo"})," and ",(0,o.jsx)(t.code,{children:"useDocument"})," hooks which can be called in any client component."]}),"\n",(0,o.jsxs)(g,{children:[(0,o.jsxs)(t.h4,{id:"add-a-repocontext-to-the-react-app",children:["Add a ",(0,o.jsx)(t.code,{children:"RepoContext"})," to the React app"]}),(0,o.jsxs)(t.p,{children:["In ",(0,o.jsx)(t.code,{children:"main.tsx"}),", import ",(0,o.jsx)(t.code,{children:"RepoContext"})," and modify the ",(0,o.jsx)(t.code,{children:"React.render()"})," call to wrap the ",(0,o.jsx)(t.code,{children:"App"})," component with a  ",(0,o.jsx)(t.code,{children:"RepoContext.Provider"}),", passing in your fresh new ",(0,o.jsx)(t.code,{children:"repo"})," to the context's ",(0,o.jsx)(t.code,{children:"value"})," prop."]}),(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Solution"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { IndexedDBStorageAdapter } from \"@automerge/automerge-repo-storage-indexeddb\"\nimport { BroadcastChannelNetworkAdapter } from '@automerge/automerge-repo-network-broadcastchannel'\nimport { Repo } from '@automerge/automerge-repo'\n// highlight-next-line\nimport { RepoContext } from '@automerge/automerge-repo-react-hooks'\n\nconst broadcast = new BroadcastChannelNetworkAdapter();\nconst indexedDB = new IndexedDBStorageAdapter();\n\nconst repo = new Repo({\n  storage: indexedDB,\n  network: [broadcast],\n})\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n  {/* highlight-next-line */}\n    <RepoContext.Provider value={repo}>\n      <App />\n        {/* highlight-next-line */}\n    </RepoContext.Provider>\n  </React.StrictMode>\n)\n\n"})})]})]}),"\n",(0,o.jsx)(t.h3,{id:"doc-handles--urls",children:"Doc Handles & URLs"}),"\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.code,{children:"Repo"})," isn't very useful until it has some documents in it! To create a new document, pass its initial value to ",(0,o.jsx)(t.code,{children:"repo.create()"}),", which accepts a type parameter with the expected document schema:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const listHandle = repo.create<TaskList>({\n  tasks: [\n    {\n      title: 'Learn Automerge',\n      done: false\n    }\n  ],\n});\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The object returned from ",(0,o.jsx)(t.code,{children:"repo.create()"})," is a ",(0,o.jsx)(t.a,{href:"/docs/repositories/dochandles/",children:(0,o.jsx)(t.code,{children:"DocHandle"})}),", which provides an interface for working with the document."]}),"\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.code,{children:"DocHandle"}),"'s ",(0,o.jsx)(t.code,{children:".url"})," property provides the document's unique identifier:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"listHandle.url // automerge:37Qr33Ub26dnS2txNCjEJDC37KFT\n"})}),"\n",(0,o.jsxs)(t.p,{children:["To retrieve a handle for a document that's already in your repo, you can pass its document URL to ",(0,o.jsx)(t.code,{children:"repo.find()"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const existingDocHandle = repo.find(existingDoc.url)\n"})}),"\n",(0,o.jsx)(t.p,{children:"It's common practice to pass document URLs around as URL hashes. For example:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"http://my-automerge-app.com/automerge-repo-quickstart/#automerge:37Qr33Ub26dnS2txNCjEJDC37KFT"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"automerge-repo"})," package exports an ",(0,o.jsx)(t.code,{children:"isValidAutomergeUrl()"})," function that you can use to determine if a given hash is a valid Document URL."]}),"\n",(0,o.jsx)(t.p,{children:"In your task list app, you'll check the page's hash and:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"retrieve the existing task list document if it exists, or"}),"\n",(0,o.jsx)(t.li,{children:"create a new document if we don't have one already."}),"\n"]}),"\n",(0,o.jsxs)(g,{children:[(0,o.jsx)(t.h3,{id:"createfind-a-document",children:"Create/Find a Document"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Check the page's URL hash (",(0,o.jsx)(t.code,{children:"document.location.hash"}),"), if any, to see if it contains a valid Automerge document URL. (You'll need to strip off the leading ",(0,o.jsx)(t.code,{children:"#"})," first.)"]}),"\n",(0,o.jsxs)(t.li,{children:["If so, pass the doc URL to ",(0,o.jsx)(t.code,{children:"repo.find()"})," to retrieve the document's handle."]}),"\n",(0,o.jsxs)(t.li,{children:["Otherwise, create a new document with ",(0,o.jsx)(t.code,{children:"repo.create()"})," and set its document URL in the page's URL hash."]}),"\n"]}),(0,o.jsx)(t.p,{children:"(Note: In a production app you'd probably handle routing differently, but this is enough for our example.)"}),(0,o.jsx)(x,{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App, { type TaskList } from './App.tsx'\nimport './index.css'\n// highlight-next-line\nimport { Repo, isValidAutomergeUrl } from '@automerge/automerge-repo'\nimport { BroadcastChannelNetworkAdapter } from '@automerge/automerge-repo-network-broadcastchannel'\nimport { BrowserWebSocketClientAdapter } from '@automerge/automerge-repo-network-websocket'\nimport { IndexedDBStorageAdapter } from \"@automerge/automerge-repo-storage-indexeddb\"\nimport { RepoContext } from '@automerge/automerge-repo-react-hooks'\n\nconst repo = new Repo({\n  network: [new BrowserWebSocketClientAdapter(\"wss://sync.automerge.org\"), new BroadcastChannelNetworkAdapter()],\n  storage: new IndexedDBStorageAdapter(),\n})\n\n// highlight-start\nconst rootDocUrl = document.location.hash.substring(1)\n\nlet handle\nif (isValidAutomergeUrl(rootDocUrl)) {\n  handle = repo.find(rootDocUrl)\n} else {\n  handle = repo.create<TaskList>({\n    tasks: [\n      {\n        title: 'Learn Automerge',\n        done: false\n      }\n    ],\n  });\n}\n\ndocument.location.hash = handle.url\n// highlight-end\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <RepoContext.Provider value={repo}>\n      <App />\n    </RepoContext.Provider>\n  </React.StrictMode>,\n)\n"})})})]}),"\n",(0,o.jsxs)(t.h2,{id:"read--edit-a-document",children:["Read & edit a ",(0,o.jsx)(t.code,{children:"Document"})]}),"\n",(0,o.jsxs)(t.h3,{id:"docs-in-react-usedocument",children:["Docs in React: ",(0,o.jsx)(t.code,{children:"useDocument"})]}),"\n",(0,o.jsxs)(t.p,{children:["Once you have the URL of the document you want to work with, you can access & modify it from your components with the ",(0,o.jsx)(t.code,{children:"useDocument"})," hook from ",(0,o.jsx)(t.code,{children:"automerge-repo-react-hooks"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Similar to React's ",(0,o.jsx)(t.code,{children:"useState"}),", ",(0,o.jsx)(t.code,{children:"useDocument"})," returns a two-item array with a reactive ",(0,o.jsx)(t.code,{children:"doc"})," value representing the document's current contents and a ",(0,o.jsx)(t.code,{children:"changeDoc"})," function which can be used to update that value."]}),"\n",(0,o.jsxs)(g,{children:[(0,o.jsxs)(t.h4,{id:"access-the-given-document-in-the-app-component",children:["Access the given document in the ",(0,o.jsx)(t.code,{children:"App"})," component"]}),(0,o.jsxs)(t.p,{children:["Update the ",(0,o.jsx)(t.code,{children:"App"})," component in ",(0,o.jsx)(t.code,{children:"src/App.tsx"})," to accept a ",(0,o.jsx)(t.code,{children:"docUrl"})," prop. In ",(0,o.jsx)(t.code,{children:"src/main.tsx"}),", pass in the URL of the created/retrieved document to the ",(0,o.jsx)(t.code,{children:"App"})," component."]}),(0,o.jsxs)(x,{children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/App.tsx"',children:"// ...\nimport { useState } from 'react'\n// highlight-next-line\nimport type { AutomergeUrl } from '@automerge/automerge-repo';\n\n// ...\n\n// highlight-next-line\nfunction App({ docUrl }: { docUrl: AutomergeUrl }) {\n  // ...\n}\n\nexport default App\n"})}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"// ...\n\ndocument.location.hash = handle.url\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <RepoContext.Provider value={repo}>\n    {/* highlight-next-line */}\n      <App docUrl={handle.url} />\n    </RepoContext.Provider>\n  </React.StrictMode>,\n)\n"})})]})]}),"\n",(0,o.jsxs)(g,{children:[(0,o.jsx)(t.h4,{id:"load-the-task-list-document",children:"Load the task list document"}),(0,o.jsxs)(t.p,{children:["In ",(0,o.jsx)(t.code,{children:"App.tsx"}),", replace the call to the ",(0,o.jsx)(t.code,{children:"useState"})," hook with a call to ",(0,o.jsx)(t.code,{children:"useDocument"})," that retrieves the document & change function for the given ",(0,o.jsx)(t.code,{children:"docUrl"}),"."]}),(0,o.jsx)(x,{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/App.tsx"',children:"// ...\n// highlight-next-line\nimport { useDocument } from '@automerge/automerge-repo-react-hooks'\nimport type { AutomergeUrl } from '@automerge/automerge-repo'\n\n// ...\n\nfunction App({ docUrl }: { docUrl: AutomergeUrl }) {\n  \n  // highlight-next-line\n  const [doc, changeDoc] = useDocument<TaskList>(docUrl)\n\n  // ...\n}\n\nexport default App\n"})})})]}),"\n",(0,o.jsx)(t.h3,{id:"read-a-documents-contents",children:"Read a document's contents"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"doc"})," value returned by the hook will initially be ",(0,o.jsx)(t.code,{children:"undefined"})," while the document is loading. Once loaded, ",(0,o.jsx)(t.code,{children:"doc"})," will have the shape of the Document you specified, and will update reactively every time the document changes."]}),"\n",(0,o.jsxs)(t.p,{children:["In App.tsx replace the page header text. Use the ",(0,o.jsx)(t.code,{children:"doc"})," value to make the title display the total number of tasks currently in the list (remember to handle the ",(0,o.jsx)(t.code,{children:"undefined"})," loading case)."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/App.tsx"',children:'// ...\n\nfunction App({ docUrl }: { docUrl: AutomergeUrl }) {\n  const [doc, changeDoc] = useDocument<TaskList>(docUrl);\n\n  return (\n    <>\n      <header>\n        <a href="https://automerge.org" target="_blank">\n          <img src={automergeLogo} className="logo" alt="Automerge logo" />\n        </a>\n        <h1>\n        {/* highlight-next-line */}\n          {doc ? doc.tasks.length : \'Loading\'} Tasks\n        </h1>\n      </header>\n      \n      {/* ... */}\n    </>\n  )\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"documents-vs-js-objects",children:"Documents vs. JS Objects"}),"\n",(0,o.jsx)(t.p,{children:"Although they look as simple as Plain Old JavaScript Objects (POJOs), Automerge Documents are much more powerful."}),"\n",(0,o.jsx)(t.p,{children:'As changes are made to a Document\'s data, those changes are stored along with the data itself, and can be "undone", "replayed", and synchronized with other changes made to the same document.'}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"useDocument"})," hook is aware of the ",(0,o.jsx)(t.code,{children:"repo"})," in use (thanks, ",(0,o.jsx)(t.code,{children:"RepoContext!"}),"), so whenever a document is changed, its new value will be saved in the given ",(0,o.jsx)(t.code,{children:"StorageAdapter"}),"(s) and synced to other users via the given ",(0,o.jsx)(t.code,{children:"NetworkAdapter"}),"(s)."]}),"\n",(0,o.jsx)(t.h3,{id:"edit-a-document",children:"Edit a document"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"changeDoc"})," function returned by the ",(0,o.jsx)(t.code,{children:"useDoc"})," hook allows us to update the given document as needed, usually in response to user action."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"changeDoc"})," accepts a callback representing the change to be applied to the existing document, which is passed as the callback's first argument. For example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"// Mark the first task as completed:\nchangeDoc(d => d.tasks[0].done = true)\n\n// Delete all tasks, resetting the list to empty:\nchangeDoc(d => d.tasks = [])\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This type of reassignment in the change handler works well for ",(0,o.jsx)(t.a,{href:"/docs/documents/values/",children:"simple values"})," like a ",(0,o.jsx)(t.code,{children:"boolean"}),", but not so well for changing text - e.g. to update the ",(0,o.jsx)(t.code,{children:".title"})," of the task."]}),"\n",(0,o.jsxs)(t.p,{children:["Instead of reassigning string values, use the ",(0,o.jsx)(t.code,{children:"updateText()"})," function from ",(0,o.jsx)(t.code,{children:"@automerge/automerge"})," to ",(0,o.jsx)(t.a,{href:"/docs/documents/text/",children:"change string values more efficiently"}),", with additional advantages such as the ability to merge substring-level edits."]}),"\n",(0,o.jsxs)(s.A,{type:"info",children:[(0,o.jsxs)(t.p,{children:["Automerge Documents are ",(0,o.jsx)(t.a,{href:"/docs/hello/#design-principles",children:"immutable"}),", so each change creates a new document while the original document remains unaltered."]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import {updateText} from '@automerge/automerge/next'\n\n// updateText() is Automerge's efficient way to track string edits\nconst renamed = updateText( \n  list.tasks[0], // the (sub) document to update \n  ['title'], // array representing the path to the text to update\n  'Learn more Automerge' // the new text value\n);\n\nconsole.log(renamed.tasks[0].title) \n// 'Learn more Automerge'\n\nconsole.log(list.tasks[0].title)\n// 'Learn Automerge' (original doc not modified)\n"})})]}),"\n",(0,o.jsx)(t.h2,{id:"collaboration-in-automerge",children:"Collaboration in Automerge"}),"\n",(0,o.jsxs)(t.p,{children:["As the name implies, one of the key powers of Automerge is its ability to ",(0,o.jsx)(t.a,{href:"/docs/under-the-hood/merge_rules/",children:"merge"})," different changes to a given document, much like git lets you merge multiple edits to a given file."]}),"\n",(0,o.jsxs)(t.p,{children:["When merging different changes to the same property, Automerge uses various strategies to avoid ",(0,o.jsx)(t.a,{href:"https://automerge.org/docs/documents/conflicts/",children:"conflicts"})," and ensure that the merged document will be identical for every user."]}),"\n",(0,o.jsx)(t.p,{children:"This makes Automerge an ideal tool for building collaborative apps that let multiple users work together on the same documents (with or without a network connection)."}),"\n",(0,o.jsx)(t.h3,{id:"collaborating-locally",children:"Collaborating Locally"}),"\n",(0,o.jsxs)(t.p,{children:["Since the Repo in this app uses a ",(0,o.jsx)(t.code,{children:"BroadcastChannelNetworkAdapter"}),", any changes made to documents in that Repo sync automatically to all other clients with the same origin (i.e. tabs within the same browser) who know the given document's URL (its unique identifier)."]}),"\n",(0,o.jsx)(t.p,{children:"Open a second tab with the same URL and edit the list, and you'll see the first tab's list updated accordingly. If you close all the tabs and reopen them, the document is preserved, as it is stored in your browser's IndexedDB."}),"\n",(0,o.jsx)(j,{src:c,alt:'Screen capture of two browser windows side-by-side showing the same app titled "Automerge Task List". As the user clicks buttons, enters text or checks boxes in one window, their changes show up immediately in the other window.',caption:"Local collaboration via the BroadcastChannelNetworkAdapter"}),"\n",(0,o.jsx)(t.p,{children:"That's right, you've already built a working Automerge-backed React app with live local synchronization! Congrats!"}),"\n",(0,o.jsx)(t.h3,{id:"collaborating-over-the-internet",children:"Collaborating over the internet"}),"\n",(0,o.jsxs)(t.p,{children:["In addition to syncing changes locally, changes to an Automerge Repo can be synced with other remote users by configuring a suitable NetworkAdapter, e.g. ",(0,o.jsx)(t.code,{children:"BrowserWebSocketClientAdapter"}),". Mutliple network adapters can be configured for the same Repo, so that e.g. local sync will continue working even if the network is unavailable."]}),"\n",(0,o.jsxs)(g,{children:[(0,o.jsxs)(t.h4,{id:"add-a-browserwebsocketclientadapter",children:["Add a ",(0,o.jsx)(t.code,{children:"BrowserWebSocketClientAdapter"})]}),(0,o.jsxs)(t.p,{children:["To add a websocket network adapter to the ",(0,o.jsx)(t.code,{children:"Repo"}),", first install the ",(0,o.jsx)(t.code,{children:"@automerge/automerge-repo-network-websocket"})," package to the project dependencies."]}),(0,o.jsx)(x,{children:(0,o.jsxs)(a.A,{children:[(0,o.jsx)(i.A,{value:"npm",label:"npm",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"$ npm i @automerge/automerge-repo-network-websocket\n"})})}),(0,o.jsx)(i.A,{value:"yarn",label:"yarn",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"$ yarn add @automerge/automerge-repo-network-websocket\n"})})})]})}),(0,o.jsxs)(t.p,{children:["Then, import and initialize the ",(0,o.jsx)(t.code,{children:"BrowserWebSocketClientAdapter"}),", telling it to sync the repo to ",(0,o.jsx)(t.code,{children:"sync.automerge.org"})," by passing in that URL to the adapter's constructor."]}),(0,o.jsxs)(t.p,{children:["Finally, add the initialized network adapter to the list of ",(0,o.jsx)(t.code,{children:"network"})," adapters in the Repo's initialization, alongside the existing ",(0,o.jsx)(t.code,{children:"BroadcastChannelNetworkAdapter"}),"."]}),(0,o.jsx)(x,{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="src/main.tsx"',children:"//...\n// highlight-next-line\nimport { BrowserWebSocketClientAdapter } from \"@automerge/automerge-repo-network-websocket\";\n\nconst repo = new Repo({\n    network: [\n        new BroadcastChannelNetworkAdapter(),\n        // highlight-next-line\n        new BrowserWebSocketClientAdapter('wss://sync.automerge.org')\n    ],\n    storage: new IndexedDBStorageAdapter(),\n})\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Now, when the Repo sees any changes it will sync them not only locally via the BroadcastChannel, but also over a websocket connection to ",(0,o.jsx)(t.code,{children:"sync.automerge.org"}),", and any other process can connect to that server and use the URL to get the changes we've made."]}),"\n",(0,o.jsx)(s.A,{type:"caution",children:(0,o.jsxs)(t.p,{children:["The Automerge project provides a public sync server for you to experiment with, at ",(0,o.jsx)(t.code,{children:"sync.automerge.org"}),". This is not a private instance, and as an experimental service has no reliability or data safety guarantees. Feel free to use it for demos and prototyping, but run your own sync server for production apps."]})}),"\n",(0,o.jsxs)(t.p,{children:["To see this in action, open the same URL (including the document ID) in a different browser, or on a different device. Unlike the local-only version, you'll now see the data updates synced across ",(0,o.jsx)(t.em,{children:"all"})," open clients."]}),"\n",(0,o.jsx)(t.h3,{id:"network-not-required",children:"Network Not Required"}),"\n",(0,o.jsx)(t.p,{children:"Now that the Repo is syncing changes remotely, what happens when the websocket connection is unavailable?"}),"\n",(0,o.jsxs)(t.p,{children:["Since the repo stores documents locally with the ",(0,o.jsx)(t.code,{children:"IndexedDBStorageAdapter"}),",  methods like ",(0,o.jsx)(t.code,{children:"Repo.find"})," will consult local storage to retrieve/modify documents, so clients can create new documents while disconnected, and any clients who've already loaded a given document will still be able to make changes to it while offline."]}),"\n",(0,o.jsx)(t.p,{children:"Once connectivity has been re-established, the Repo will sync any local changes with those from remote peers, so everyone ultimately sees the same data."}),"\n",(0,o.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(t.p,{children:"Congratulations! You've built a local-first, offline-capable app that supports multiplayer collaboration locally and over the network."}),"\n",(0,o.jsx)(t.p,{children:"If you're hungry for more:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Look at the ",(0,o.jsx)(t.a,{href:"/docs/cookbook/modeling-data/",children:"Cookbook"})," section for tips on how to model your app's data in Automerge"]}),"\n",(0,o.jsxs)(t.li,{children:["Dive deeper into how Automerge ",(0,o.jsx)(t.a,{href:"https://automerge.org/docs/under-the-hood/storage/",children:"stores"})," and ",(0,o.jsx)(t.a,{href:"https://automerge.org/docs/under-the-hood/merge_rules/",children:"merges"})," documents in the 'Under the Hood' section"]}),"\n",(0,o.jsxs)(t.li,{children:["Join the ",(0,o.jsx)(t.a,{href:"https://discord.gg/zKGe4DCfgR",children:"Discord"})," to ask questions, show off your Automerge apps, and connect with the Automerge team & community"]}),"\n"]})]})}function y(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(w,{...e})}):w(e)}}}]);