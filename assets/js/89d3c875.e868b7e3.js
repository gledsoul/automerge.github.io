"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5216],{6062:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var r=t(4848),i=t(8453);const s={sidebar_position:4},o="Rich Text Schema",c={id:"under-the-hood/rich_text_schema",title:"Rich Text Schema",description:"The rich text API provides a set of primitives for annotating a sequence of characters with formatting information. The two primitives in question are",source:"@site/docs/under-the-hood/rich_text_schema.md",sourceDirName:"under-the-hood",slug:"/under-the-hood/rich_text_schema",permalink:"/docs/under-the-hood/rich_text_schema",draft:!1,unlisted:!1,editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/under-the-hood/rich_text_schema.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Merge Rules",permalink:"/docs/under-the-hood/merge_rules"},next:{title:"API Docs",permalink:"/docs/api"}},h={},a=[{value:"Marks",id:"marks",level:2},{value:"Block Markers",id:"block-markers",level:2},{value:"<code>parents</code> - representing hierarchical structure",id:"parents---representing-hierarchical-structure",level:3},{value:"Embeds",id:"embeds",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"rich-text-schema",children:"Rich Text Schema"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"../../documents/rich_text",children:"rich text"})," API provides a set of primitives for annotating a sequence of characters with formatting information. The two primitives in question are"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Marks - formatting spans which apply to a range of characters and can overlap"}),"\n",(0,r.jsx)(n.li,{children:"Block markers which divide the text into blocks"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["These primitives are flexible enough that there are a wide variety of ways to build an editor on top of them. This page documents the (extremely minimal) schema we use in the ",(0,r.jsx)(n.code,{children:"automerge-prosemirror"})," bindings and which we hope is general and useful enough that other editor bindings could adopt it. This is a work in progress and we hope others will build on and contribute to it."]}),"\n",(0,r.jsx)(n.p,{children:"The requirements we have for this schema are:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The ability to represent inline text decoration such as bold spans, as well as semantic information like hyperlinks or code spans"}),"\n",(0,r.jsx)(n.li,{children:"A way of representing hierarchical structure which merges well - or, alternatively, which results in patches which are commensurate in size with the editing action the user took (inserting a paragraph is a single user action, we would like it to not result in a large patch which is hard to interpret)"}),"\n",(0,r.jsx)(n.li,{children:"A way for applications to extend the schema with their own specific mark and block types in such a way that there is still some degree of interoperability between applications"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"marks",children:"Marks"}),"\n",(0,r.jsx)(n.p,{children:"We define the following marks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"strong"'})," - represents a span of bolded text, has value ",(0,r.jsx)(n.code,{children:"true"})," if present"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"em"'})," - represents a span of italicized text, has value ",(0,r.jsx)(n.code,{children:"true"})," if present"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"link"'})," - represents a span of text which links to a URL. The value is a string  representing the JSON serialization of the following object"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "href": "<the URL to link to>",\n    "title": "<a description of what the link points to>"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Any other mark names are application specific and should be prefixed by a probably unique string that begins ",(0,r.jsx)(n.code,{children:'"__ext__"'}),". If an editor integration encounters a mark it does not recognise, the mark should be round tripped through the editor - I.e. if the users makes some change to the document via the editor integration, the mark should be left untouched."]}),"\n",(0,r.jsx)(n.h2,{id:"block-markers",children:"Block Markers"}),"\n",(0,r.jsx)(n.p,{children:"Blocks represent the hierarchical structure of the document. A block has the following type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n    type: string,\n    parents: string[],\n    attrs: Record<string, any>,\n    isEmbed: boolean,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["All text following a block marker until the next block marker or the end of the document belongs to the block marker - except in the case of an ",(0,r.jsx)(n.code,{children:"isEmbed: true"})," block, which will be described shortly."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"type"})," of the block determines how the block is rendered. We define the following block types:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"paragraph"'})," - a block of text"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"heading"'})," a heading. The ",(0,r.jsx)(n.code,{children:"attrs"})," object should contain a ",(0,r.jsx)(n.code,{children:"level"})," key which is a number from 1 to 6"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"code-block"'})," - a block of code. The ",(0,r.jsx)(n.code,{children:"attrs"})," object ",(0,r.jsx)(n.strong,{children:"MAY"})," have a ",(0,r.jsx)(n.code,{children:"language: string"})," key which hints at what language the block contains"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"blockquote"'})," - a block of quoted text"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"ordered-list-item"'})," - An item in an ordered list (i.e. a numbered list)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"unordered-list-item"'})," - An item in an unordered list (i.e. a bulleted list)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"image"'})," - An image. The ",(0,r.jsx)(n.code,{children:"attrs"})," object should contain the following keys:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n    src: string // the URL of the image,\n    alt: string | null // the alt text describing the content of the image,\n    title: string | null// the title of the image,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["An image block ",(0,r.jsx)(n.strong,{children:"SHOULD"})," have ",(0,r.jsx)(n.code,{children:"isEmbed: true"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Any other block types are application specific and should be prefixed by a probably unique string that begins ",(0,r.jsx)(n.code,{children:'"__ext__"'}),". If an editor integration encounters a block type it does not recognise the block should be rendered as a generic block element. Unrecognised attributes should be round tripped through the editor."]}),"\n",(0,r.jsxs)(n.h3,{id:"parents---representing-hierarchical-structure",children:[(0,r.jsx)(n.code,{children:"parents"})," - representing hierarchical structure"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"parents"})," array of a block represents the blocks which it appears inside. For example, a block like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    type: "paragraph",\n    parents: ["blockquote"]\n    attrs: {},\n    isEmbed: false\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Represents a paragraph which is inside a blockquote. We call the ",(0,r.jsx)(n.code,{children:"path"})," of a block marker the array ",(0,r.jsx)(n.code,{children:"[...parents, type]"}),". The children of some block ",(0,r.jsx)(n.code,{children:"a"})," are all the blocks following that marker for which the path of ",(0,r.jsx)(n.code,{children:"a"})," is a proper prefix of the child block's path."]}),"\n",(0,r.jsx)(n.p,{children:"For example, given the following sequence of block marks:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{ parents: ["blockquote"], type: "paragraph" }\n{ parents: ["blockquote", "ordered-list-item"], type: "paragraph" }\n{ parents: [], type: "paragraph" }\n'})}),"\n",(0,r.jsx)(n.p,{children:"The second child is a parent of the first, while the final block is a sibling of the first block."}),"\n",(0,r.jsx)(n.h3,{id:"embeds",children:"Embeds"}),"\n",(0,r.jsxs)(n.p,{children:["Blocks with ",(0,r.jsx)(n.code,{children:"isEmbed: true"})," are blocks which are not part of the flow of text and represent some non-textual content such as an image. Embed block markers should ",(0,r.jsx)(n.em,{children:"not"})," break up the flow of text. I.e. the text following an ",(0,r.jsx)(n.code,{children:"isEmbed: true"})," block marker belongs to the first non embed block preceding the embed block marker."]}),"\n",(0,r.jsxs)(n.p,{children:["If an application encounters an unknown embed block it should render the block using some sort of generic UI and round trip the block through the editor. The editor ",(0,r.jsx)(n.strong,{children:"SHOULD"})," allow the user to delete the embedded block marker in some manner."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);